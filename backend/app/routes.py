import os
import json
import uuid
from datetime import datetime
from flask import Flask, render_template, request, session
from flask_sqlalchemy import SQLAlchemy


basedir = os.path.abspath(os.path.dirname(__file__))
# JOR: I THINK THE COMMENTED LINE NEEDS TO BE USED FOR ACTUAL DEPLOYMENT
app = Flask(__name__, static_url_path='/gamespace/static')
filename = os.path.join(basedir, 'secret_key')
app.config['SECRET_KEY'] = open(filename, 'rb').read()
# disabling warning generated by track modifications per:
# http://stackoverflow.com/questions/33738467/how-do-i-know-if-i-can-disable-sqlalchemy-track-modifications
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ECHO'] = False
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///{}'.format(os.path.join(basedir, 'gamespace.db'))
db = SQLAlchemy(app)


# Database Models
class Coordinate(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    session_id = db.Column(db.Integer, db.ForeignKey('session.id'))
    pos_x = db.Column(db.Float)
    pos_y = db.Column(db.Float)
    pos_z = db.Column(db.Float)
    rot_x = db.Column(db.Float)
    rot_y = db.Column(db.Float)
    rot_z = db.Column(db.Float)
    timestamp = db.Column(db.Integer)


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.String(32))
    created_on = db.Column(db.DateTime)


class Session(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.String(32), db.ForeignKey('user.id'))
    created_on = db.Column(db.DateTime)


class Action(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    session_id = db.Column(db.Integer, db.ForeignKey('session.id'))
    action_type = db.Column(db.String(16))
    game_id = db.Column(db.String)
    timestamp = db.Column(db.Integer)


@app.route('/gamespace')
def home():
    """Render a GameSpace instance that starts from a random game."""
    # uuid.uuid4() returns a type UUID object, we just want the string value
    session['has_user'] = False
    db_session = Session()
    db_session.created_on = datetime.utcnow()
    db.session.add(db_session)
    db.session.commit()
    session['sid'] = db_session.id
    # Pass -1 for starting_game_id, which will cause a random game to be selected as the start point
    return render_template('index.html', starting_game_id=-1, pros_user_id=str(uuid.uuid4()).replace('-', ''))


@app.route('/gamespace/start=<starting_game_hashed_id>')
def home_with_specified_start_game(starting_game_hashed_id):
    """Render a GameSpace instance that starts from a specified game."""
    # Try to unhash the hashed game ID
    starting_game_unhashed_id = int(starting_game_hashed_id, 16) / 348290
    print starting_game_unhashed_id
    return render_template('index.html', starting_game_id=starting_game_unhashed_id)


@app.route('/gamespace/load_info')
def load_info():
    return json.dumps([fn for fn in os.listdir("./static/model_data") if fn.split(".")[-1] == "json"])


@app.route('/gamespace/log', methods=['POST'])
def log_info():
    coords = json.loads(request.form.get('coordinates'))
    actions = json.loads(request.form.get('actions'))
    user_id = request.form.get('user_id')
    # The initialization code creates a random user and sends it to the JavaScript app
    # The JavaScript app checks it's browser's localStorage to see if the user is known
    # if it is, we ignore the random user, and replace the session's user with the known
    # user
    if not session['has_user']:
        user_check = User.query.filter_by(user_id=user_id).first()
        session['has_user'] = True
        if user_check:
            session['user_id'] = user_check.id
        else:
            new_user = User(user_id=user_id)
            new_user.created_on = datetime.utcnow()
            db.session.add(new_user)
            db.session.commit()
            session['user_id'] = new_user.id
        sess = Session.query.filter_by(id=session['sid']).first()
        sess.user_id = session['user_id']
        db.session.commit()

    coordinate_objects = []
    action_objects = []
    for row in coords:
        coordinate_objects.append(Coordinate(session_id=session['sid'], pos_x=row[0], pos_y=row[1], pos_z=row[2], rot_x=row[3], rot_y=row[4], rot_z=row[5], timestamp=row[6]))

    for row in actions:
        action_objects.append(Action(session_id=session['sid'], action_type=row[0], game_id=row[1], timestamp=row[2]))

    db.session.bulk_save_objects(coordinate_objects)
    db.session.bulk_save_objects(action_objects)
    db.session.commit()

    # don't need to return anything but a 200
    return ""


if __name__ == '__main__':
    app.run()
else:
    pass


# if not app.debug:
#     import logging
#     file_handler = logging.FileHandler('gamespace.log')
#     file_handler.setLevel(logging.WARNING)
#     app.logger.addHandler(file_handler)
